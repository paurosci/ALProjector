/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package alp;
import java.awt.Toolkit;
import java.io.File;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane; 


/**
 *
 * @author Pau
 */
public class JMainInterface extends javax.swing.JFrame implements ActivityRegisterListener,SerialInputMRListener{
    
    //declarate files and objects
    // if file doesnt exists, then create it

    //Create classes
    File currentDirFile = new File("config.xml");
    //String config_path = currentDirFile.getAbsolutePath();
    
    File currentLogFile = new File("logFile.log");
    String log_path = currentLogFile.getAbsolutePath();
    
    File currentMRFile = new File("motor_rate.txt");
    String mr_path = currentMRFile.getAbsolutePath();
    
    XMLprocess configParams = new XMLprocess(currentDirFile);
    WriteFile log = new WriteFile(log_path,true); 
    WriteFile mr = new WriteFile(mr_path,true);
    Arduino conn = new Arduino();
    /**
     * Creates new form JInterface
     */
    //for port listener
    
    public JMainInterface() throws IOException {
        //Create Files
        initComponents();
        //fill log title
        if(!currentLogFile.exists()){
            DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
            Date date = new Date();

            log.writeToFile("****************************"); 
            log.writeToFile("*   Log File: "+dateFormat.format(date)+"   *");
            log.writeToFile("****************************");
            log.writeToFile(""); 
        }
        
        else{
            
            DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
            Date date = new Date();
            log.writeToFile("");
            log.writeToFile("******************"); 
            log.writeToFile("*   "+dateFormat.format(date)+"   *");
            log.writeToFile("******************");
            log.writeToFile("");

        }
        
        if(!currentMRFile.exists()){
            DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
            Date date = new Date();
            mr.writeToFile("******************************************");
            mr.writeToFile("*   Motor Rate Values File: "+dateFormat.format(date)+"   *");
            mr.writeToFile("******************************************");
            mr.writeToFile(""); 
        }
        
        DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
        Date date = new Date();
        mr.writeToFile(dateFormat.format(date));
        mr.writeToFile("");
        
        ActivityRegister.getActivityRegister().addEventListener(this);
        ActivityRegister.getActivityRegister().addSerialInputMREventListener(this);
        setPortList(); 
    }

    //Arduino conn = new Arduino(configParams.serialCOM,Integer.parseInt(configParams.baud_rate));
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTAConsole = new javax.swing.JTextArea();
        jSeparator2 = new javax.swing.JSeparator();
        jPanel1 = new javax.swing.JPanel();
        jBarduinoConn = new javax.swing.JButton();
        jBarduinoDisconn = new javax.swing.JButton();
        jCBSerialCom = new javax.swing.JComboBox();
        jLComRate = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jBLaserOn = new javax.swing.JButton();
        jBLaserOff = new javax.swing.JButton();
        jTFMessage = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jBMotorOn = new javax.swing.JButton();
        jBMotorOff = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jCBSpinMode = new javax.swing.JComboBox();
        jLMotorSpinRate = new javax.swing.JLabel();
        jBSaveRate = new javax.swing.JButton();
        jBSendMess = new javax.swing.JButton();
        jBClear = new javax.swing.JButton();
        jCBdispType = new javax.swing.JComboBox();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        Exit = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Bitmap Laser Projector Interface");
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("logo.png")));

        jTAConsole.setEditable(false);
        jTAConsole.setBackground(new java.awt.Color(0, 0, 0));
        jTAConsole.setColumns(20);
        jTAConsole.setFont(new java.awt.Font("Consolas", 0, 13)); // NOI18N
        jTAConsole.setForeground(new java.awt.Color(255, 255, 255));
        jTAConsole.setRows(5);
        jScrollPane1.setViewportView(jTAConsole);

        jSeparator2.setToolTipText("Display Message");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Port COM", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));

        jBarduinoConn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/alp/arduino_icon.png"))); // NOI18N
        jBarduinoConn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jBarduinoConnMouseClicked(evt);
            }
        });
        jBarduinoConn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBarduinoConnActionPerformed(evt);
            }
        });

        jBarduinoDisconn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/alp/arduino_discon_icon.png"))); // NOI18N
        jBarduinoDisconn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jBarduinoDisconnMouseClicked(evt);
            }
        });

        jCBSerialCom.setName(""); // NOI18N

        jLComRate.setText(configParams.baud_rate + " baud");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jCBSerialCom, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLComRate, javax.swing.GroupLayout.PREFERRED_SIZE, 76, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jBarduinoConn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBarduinoDisconn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(34, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jBarduinoDisconn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBarduinoConn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jCBSerialCom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLComRate)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLComRate.getAccessibleContext().setAccessibleName("");

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Laser Controls", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));

        jBLaserOn.setText("Laser ON");
        jBLaserOn.setActionCommand("LaserON");
        jBLaserOn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jBLaserOnMouseClicked(evt);
            }
        });
        jBLaserOn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBLaserOnActionPerformed(evt);
            }
        });

        jBLaserOff.setText("Laser OFF");
        jBLaserOff.setActionCommand("LaserOFF");
        jBLaserOff.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jBLaserOffMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jBLaserOff, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jBLaserOn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jBLaserOn, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBLaserOff, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22))
        );

        jTFMessage.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jTFMessage.setText("Display Message");
        jTFMessage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTFMessageActionPerformed(evt);
            }
        });

        jLabel1.setText("Display Message:");

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Motor Controls", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));

        jBMotorOn.setText("Motor ON");
        jBMotorOn.setActionCommand("MotorON");
        jBMotorOn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jBMotorOnMouseClicked(evt);
            }
        });

        jBMotorOff.setText("Motor OFF");
        jBMotorOff.setActionCommand("MotorOFF");
        jBMotorOff.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jBMotorOffMouseClicked(evt);
            }
        });

        jLabel3.setText("Motor Spin Rate:");

        jLabel2.setText("Motor Spin Mode:");

        jCBSpinMode.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Not Recognised", "CLOCK", "CLOCK-WISE" }));
        jCBSpinMode.setEnabled(false);

        jLMotorSpinRate.setText(configParams.spin_rate+" ms");

        jBSaveRate.setText("Save Detected Rate");
        jBSaveRate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jBSaveRateMouseClicked(evt);
            }
        });
        jBSaveRate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBSaveRateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLMotorSpinRate, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(jCBSpinMode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jBMotorOn, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jBMotorOff, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(jBSaveRate)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jBMotorOn, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBMotorOff, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jBSaveRate, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLMotorSpinRate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jCBSpinMode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        if(configParams.spin_direction.equals("c"))
        jCBSpinMode.setSelectedIndex(1);
        else if(configParams.spin_direction.equals("w"))
        jCBSpinMode.setSelectedIndex(2);
        else
        jCBSpinMode.setSelectedIndex(0);

        jBSendMess.setText("Send");
        jBSendMess.setActionCommand("");
        jBSendMess.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jBSendMessMouseClicked(evt);
            }
        });

        jBClear.setText("Clear");
        jBClear.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jBClearMouseClicked(evt);
            }
        });

        jCBdispType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "FIXED", "SCROLLING" }));

        jMenu1.setText("File");

        jMenuItem3.setText("Open Arduino COM...");
        jMenu1.add(jMenuItem3);

        jMenuItem1.setText("Close Arduino COM...");
        jMenu1.add(jMenuItem1);
        jMenu1.add(jSeparator1);

        Exit.setText("Exit");
        Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitActionPerformed(evt);
            }
        });
        jMenu1.add(Exit);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Help");

        jMenuItem2.setText("Help...");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem2);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparator2)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addGap(18, 18, 18)
                                                .addComponent(jCBdispType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(jTFMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jBSendMess, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jBClear, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(11, 11, 11)
                                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 56, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jCBdispType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTFMessage)
                    .addComponent(jBSendMess, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jBClear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(29, 29, 29)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitActionPerformed

            System.exit(0);

    }//GEN-LAST:event_ExitActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
         JOptionPane.showMessageDialog(null, "Version: BLP 1.0.0", "Help", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jBarduinoConnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBarduinoConnActionPerformed
        // TODO add your handling code here:
        //SerialRxTx connect = new SerialRxTx(getConfigParams.serialCOM,Integer.parseInt(getConfigParams.baud_rate));
        //Arduino conn = new Arduino(getConfigParams.serialCOM,Integer.parseInt(getConfigParams.baud_rate));
        //conn.ConnectAduino(getConfigParams.serialCOM, Integer.parseInt(getConfigParams.baud_rate));
    }//GEN-LAST:event_jBarduinoConnActionPerformed
    
    //connection to Arduino
    private void jBarduinoConnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBarduinoConnMouseClicked
        // TODO add your handling code here:
        //we take COM from comboBox and baud Rate from configFile
        try{
        configParams = new XMLprocess(currentDirFile);
        jLComRate.setText(configParams.baud_rate);
        if(checkBaud(configParams.baud_rate)){            
            conn.OpenCommArduino(jCBSerialCom.getSelectedItem().toString(), Integer.parseInt(configParams.baud_rate));       
            ActivityRegister.getActivityRegister().addActivity("Connected to Port " + jCBSerialCom.getSelectedItem().toString());
        }
        else
            ActivityRegister.getActivityRegister().addActivity("Error: Not possible to connect. Check Baud_Rate in config file.");

        }catch(Exception e){
            ActivityRegister.getActivityRegister().addActivity("Error: Not possible to open Port COM");
        }
    }//GEN-LAST:event_jBarduinoConnMouseClicked

    private void jBarduinoDisconnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBarduinoDisconnMouseClicked
        // TODO add your handling code here:
        try{
        conn.CloseArduinoComm();
        ActivityRegister.getActivityRegister().addActivity("Closed port COM");

        }catch(Exception e){
        ActivityRegister.getActivityRegister().addActivity("Error: Not possible to close Port COM");  
        }
    }//GEN-LAST:event_jBarduinoDisconnMouseClicked

    private void jBLaserOnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBLaserOnMouseClicked
        try {           
            conn.CommArduino("l|");
        } catch (Exception ex) {
            Logger.getLogger(JMainInterface.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jBLaserOnMouseClicked

    private void jBLaserOffMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBLaserOffMouseClicked
        try {
            // TODO add your handling code here:
            conn.CommArduino("k|");
        } catch (Exception ex) {
            Logger.getLogger(JMainInterface.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jBLaserOffMouseClicked

    private void jTFMessageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTFMessageActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jTFMessageActionPerformed

    private void jBSendMessMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBSendMessMouseClicked
        try {
            // TODO add your handling code here:
            configParams = new XMLprocess(currentDirFile);
            String Text = checkText(jTFMessage.getText()); 
             
            if(Text!="|"){
            if(jCBdispType.getSelectedIndex()==0)
                conn.CommArduino("mf"+Text+"|");
            else
                conn.CommArduino("ms"+Text+"|");
            }
        } catch (Exception ex) {
            Logger.getLogger(JMainInterface.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jBSendMessMouseClicked

    private void jBClearMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBClearMouseClicked
        // TODO add your handling code here:
        try {
            // TODO add your handling code here:
            conn.CommArduino("c|");
            jTFMessage.setText(null);
        } catch (Exception ex) {
            Logger.getLogger(JMainInterface.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jBClearMouseClicked

    private void jBMotorOffMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBMotorOffMouseClicked
        try {
            // TODO add your handling code here:
            conn.CommArduino("o|");
        } catch (Exception ex) {
            Logger.getLogger(JMainInterface.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jBMotorOffMouseClicked

    private void jBMotorOnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBMotorOnMouseClicked
        try {
            // TODO add your handling code here:
            configParams = new XMLprocess(currentDirFile);
            if(configParams.spin_direction.equals("c")||configParams.spin_direction.equals("w"))
            {
                if(configParams.spin_direction.equals("c"))
                jCBSpinMode.setSelectedIndex(1);

                else
                jCBSpinMode.setSelectedIndex(2);

                int speed = Integer.parseInt(configParams.spin_rate);
                if(speed>=10000&&speed<=90000){
                    conn.CommArduino("f"+configParams.spin_direction+
                        configParams.spin_rate+"|");
                }
                else
                    ActivityRegister.getActivityRegister().addActivity("Error: Not possible run motor. Check motor Spin_Rate in config file.");

            }
            else
            ActivityRegister.getActivityRegister().addActivity("Error: Not possible run motor. Check motor Spin_Direction in config file.");
        } catch (Exception ex) {
            Logger.getLogger(JMainInterface.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jBMotorOnMouseClicked

    private void jBSaveRateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBSaveRateMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jBSaveRateMouseClicked

    private void jBSaveRateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBSaveRateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jBSaveRateActionPerformed

    private void jBLaserOnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBLaserOnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jBLaserOnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */      
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JMainInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JMainInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JMainInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JMainInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new JMainInterface().setVisible(true);
                } catch (Exception ex) {
                    Logger.getLogger(JMainInterface.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    ///get avaiable ports and set config file Default port     
    private void setPortList() {
        int i = 0;
        int defCOM = -1;
        
        ArrayList portList = conn.getPortList(); 
        while (i < portList.size()) {
            jCBSerialCom.addItem(portList.get(i));
            if (portList.get(i).equals(configParams.serialCOM)) {
                defCOM = i;
            }
            i++;
        }     
        //COM from config file find in PC COM connections
        if (defCOM != -1) {
            jCBSerialCom.setSelectedIndex(defCOM);
        } else {
            //COM in config file not found in PC configuration
            ActivityRegister.getActivityRegister().addActivity("Error: No available COM port selected. Please check configFile params");
            jBarduinoConn.setEnabled(false);
            jBarduinoDisconn.setEnabled(false);
        }
    }
private boolean checkBaud(String baud){
    switch(baud){
        case "300": 
         return true; 
        case "600":
         return true; 
        case "1200": 
         return true; 
        case "2400": 
         return true; 
        case "4800":
         return true; 
        case "9600":
         return true; 
        case "14400":
         return true; 
        case "19200": 
         return true; 
        case "28800": 
         return true; 
        case "38400":
         return true; 
        case "57600":
         return true; 
        case "115200":
         return true; 
        default: 
         return false; 
    }
}    
private String checkText(String Text){
        String final_text=""; 
        String temp_errors = ""; 
        boolean errors = false; 
        
        for(int i=0;i<Text.length();i++){
            if(checkChar(Text.charAt(i)).equals("|")){
                temp_errors += Text.charAt(i)+" ";
                errors=true; 
            }           
            else
                final_text+=checkChar(Text.charAt(i));
        }
        if(errors){
        ActivityRegister.getActivityRegister().addActivity("Error: Not recognized characters: "+temp_errors); 
        final_text = "|"; 
        }
        
        return final_text; 
    }
    
    private String checkChar(char temp){
            switch(temp){
               case '0': 
                return "0";
               case '1': 
                return "1";
               case '2': 
                return "2";
               case '3': 
                return "3";
               case '4':
                return "4";
               case '5': 
                return "5";
               case '6':
                return "6";
               case '7': 
                return "7";
               case '8':
                return "8";
               case '9': 
                return "9";
               case ' ': 
                return " ";
               case 'A': 
                return "A";
               case 'B': 
                return "B";
               case 'C': 
                return "C";
               case 'D': 
                return "D";
               case 'E':
                return "E";
               case 'F': 
                return "F"; 
               case 'G':
                return "G";
               case 'H': 
                return "H";
               case 'I':
                return "I"; 
               case 'J': 
                return "J"; 
               case 'K': 
                return "K"; 
               case 'L': 
                return "L";
               case 'M': 
                return "M";
               case 'N': 
                return "N";
               case 'O': 
                return "O";
               case 'P':
                return "P";
               case 'Q': 
                return "Q";
               case 'R':
                return "R";
               case 'S': 
                return "S";
               case 'T':
                return "T";
               case 'U': 
                return "U";
               case 'V': 
                return "V";
               case 'W': 
                return "W";
               case 'X': 
                return "X";
               case 'Y': 
                return "Y";
               case 'Z':
                return "Z";
               case 'a': 
                return "a";
               case 'b': 
                return "b";
               case 'c': 
                return "c";
               case 'd': 
                return "d";
               case 'e':
                return "e";
               case 'f': 
                return "f";
               case 'g':
                return "g";
               case 'h': 
                return "h";
               case 'i':
                return "i";
               case 'j': 
                return "j";
                case 'k': 
                return "k";
               case 'l': 
                return "l";
              case 'm': 
                return "m";
              case 'n': 
                return "n";
               case 'o': 
                return "o";
               case 'p':
                return "p";
               case 'q': 
                return "q";
               case 'r':
                return "r";
               case 's': 
                return "s";
               case 't':
                return "t";
               case 'u': 
                return "u";
               case 'v': 
                return "v";
              case 'w': 
                return "w";
              case 'x':
                return "x";
               case 'y': 
                return "y";
               case 'z':
                return "z";
               case ',': 
                return ","; 
               case ';': 
                return ";";
              case '.': 
                return ".";
              case ':': 
                return ":"; 
               case '!': 
                return "!";
               case '?':
                return "?";
               case '+':
                return "+"; 
               case '-': 
                return "-";  
               case '=': 
                return "="; 
              case '%': 
                return "%";
              case '#': 
                return "#";
              case '*': 
                return "*";
              case ')': 
                return ")";
              default: 
                return "|"; 
            }    
 }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem Exit;
    private javax.swing.JButton jBClear;
    private javax.swing.JButton jBLaserOff;
    private javax.swing.JButton jBLaserOn;
    private javax.swing.JButton jBMotorOff;
    private javax.swing.JButton jBMotorOn;
    private javax.swing.JButton jBSaveRate;
    private javax.swing.JButton jBSendMess;
    private javax.swing.JButton jBarduinoConn;
    private javax.swing.JButton jBarduinoDisconn;
    private javax.swing.JComboBox jCBSerialCom;
    private javax.swing.JComboBox jCBSpinMode;
    private javax.swing.JComboBox jCBdispType;
    private javax.swing.JLabel jLComRate;
    private javax.swing.JLabel jLMotorSpinRate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTextArea jTAConsole;
    private javax.swing.JTextField jTFMessage;
    // End of variables declaration//GEN-END:variables

    @Override
    public void EventAdded(ActivityRegisterEvent Description) {
            DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
            Date date = new Date();
            jTAConsole.append(dateFormat.format(date) + " - " +Description.Description + "\n");
        try {
            //write log file
            log.writeToFile(dateFormat.format(date) + " - " +Description.Description + "\n");
        } catch (IOException ex) {
            Logger.getLogger(JMainInterface.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    @Override
    public void EventAdded(SerialInputMREvent Description) {
         try {
            //mr.writeToFile(Description.Description + "\n");
            mr.writeToFile(Description.Description);
         } catch(IOException ex){
            Logger.getLogger(JMainInterface.class.getName()).log(Level.SEVERE, null, ex);
         }
    }
    
}
